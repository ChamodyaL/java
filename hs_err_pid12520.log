#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (malloc) failed to allocate 38336 bytes. Error detail: Chunk::new
# Possible reasons:
#   The system is out of physical RAM or swap space
#   This process is running with CompressedOops enabled, and the Java Heap may be blocking the growth of the native heap
# Possible solutions:
#   Reduce memory load on the system
#   Increase physical memory or swap space
#   Check if swap backing store is full
#   Decrease Java heap size (-Xmx/-Xms)
#   Decrease number of Java threads
#   Decrease Java thread stack sizes (-Xss)
#   Set larger code cache with -XX:ReservedCodeCacheSize=
#   JVM is running with Unscaled Compressed Oops mode in which the Java heap is
#     placed in the first 4GB address space. The Java Heap base address is the
#     maximum limit for the native heap growth. Please use -XX:HeapBaseMinAddress
#     to set the Java Heap base and to place the Java Heap above 4GB virtual address.
# This output file may be truncated or incomplete.
#
#  Out of Memory Error (arena.cpp:150), pid=12520, tid=14456
#
# JRE version: Java(TM) SE Runtime Environment (22.0.2+9) (build 22.0.2+9-70)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (22.0.2+9-70, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# No core dump will be written. Minidumps are not enabled by default on client versions of Windows
#

---------------  S U M M A R Y ------------

Command Line: -Dfile.encoding=UTF-8 pos.pro.Home

Host: AMD Ryzen 5 5625U with Radeon Graphics         , 12 cores, 7G,  Windows 11 , 64 bit Build 26085 (10.0.26085.1)
Time: Sun Oct  6 13:43:52 2024 Sri Lanka Standard Time elapsed time: 0.069259 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x000001a979d45340):  JavaThread "C2 CompilerThread0" daemon [_thread_in_native, id=14456, stack(0x0000008d20b00000,0x0000008d20c00000) (1024K)]


Current CompileTask:
C2:69  103 %     4       java.lang.StringCoding::countPositives @ 7 (33 bytes)

Stack: [0x0000008d20b00000,0x0000008d20c00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
